name: Copilot Full Autopilot

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      mode:
        description: "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (full = –≤–µ—Ç–∫–∞ + PR, direct = –ø—Ä—è–º–æ–π –∫–æ–º–º–∏—Ç –≤ main)"
        required: true
        default: "full"
        type: choice
        options:
          - full
          - direct
      enable_auto_merge:
        description: "–í–∫–ª—é—á–∏—Ç—å auto-merge –¥–ª—è PR (true/false)"
        required: false
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

concurrency:
  group: autopilot-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  actions: write

env:
  GIT_USER_NAME: "Copilot Chat Assistant"
  GIT_USER_EMAIL: "copilot@yourdomain.com"
  MAIN_BRANCH: "main"
  WORK_BRANCH_PREFIX: "autopilot"
  REPO: "${{ github.repository }}"
  TZ: "UTC"

jobs:
  autopilot:
    name: Run Copilot Full Autopilot
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config --global user.name  "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"

      - name: Ensure PAT provided
        id: pat_check
        run: |
          if [ -z "${{ secrets.COPILOT_PAT }}" ]; then
            echo "‚ùå –°–µ–∫—Ä–µ—Ç COPILOT_PAT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Settings ‚Üí Secrets ‚Üí Actions."
            exit 1
          else
            echo "‚úÖ PAT –Ω–∞–π–¥–µ–Ω."
          fi

      - name: Switch remote to PAT (write-enabled)
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.COPILOT_PAT }}@github.com/${REPO}.git
          git remote -v

      - name: Determine mode
        id: mode
        run: |
          MODE="${{ github.event_name == 'workflow_dispatch' && inputs.mode || 'full' }}"
          echo "mode=$MODE" >> $GITHUB_OUTPUT
          echo "Selected mode: $MODE"

      - name: Compute work branch
        if: steps.mode.outputs.mode == 'full'
        id: branch
        run: |
          ts="$(date -u +'%Y%m%d-%H%M%S')"
          work_branch="${WORK_BRANCH_PREFIX}/update-${ts}"
          echo "work_branch=$work_branch" >> $GITHUB_OUTPUT
          echo "Will use branch: $work_branch"

      - name: Create and checkout work branch
        if: steps.mode.outputs.mode == 'full'
        run: |
          git checkout -b "${{ steps.branch.outputs.work_branch }}" "${MAIN_BRANCH}"

      - name: Install tooling (example)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          # –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
          # curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          # sudo apt-get install -y nodejs
          # npm ci || true

      - name: Run custom automation tasks
        id: tasks
        run: |
          set -e
          echo "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á..."
          # ------------------ CUSTOM TASKS START ------------------
          # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Ç–µ—Å—Ç—ã –∏ —Ç.–ø.

          # –ü—Ä–∏–º–µ—Ä: –∞–≤—Ç–æ-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å prettier)
          # npx prettier --write .

          # –ü—Ä–∏–º–µ—Ä: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ —Å–≤–æ–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º)
          # if [ -f package.json ]; then
          #   current_version=$(jq -r '.version' package.json)
          #   echo "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $current_version"
          #   IFS='.' read -r major minor patch <<< "$current_version"
          #   new_version="$major.$minor.$((patch + 1))"
          #   tmp=$(mktemp)
          #   jq --arg v "$new_version" '.version = $v' package.json > "$tmp" && mv "$tmp" package.json
          #   echo "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $new_version"
          # fi

          # –ü—Ä–∏–º–µ—Ä: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è README —Å–µ–∫—Ü–∏–∏
          # if grep -q "<!-- AUTOPILOT:STATUS -->" README.md 2>/dev/null; then
          #   status_block="–û–±–Ω–æ–≤–ª–µ–Ω–æ: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          #   awk -v repl="$status_block" '
          #     /<!-- AUTOPILOT:STATUS -->/ {print; print repl; next} {print}
          #   ' README.md > README.md.tmp && mv README.md.tmp README.md
          # fi

          # –ü—Ä–∏–º–µ—Ä: –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
          # if [ -f package.json ]; then
          #   npm test || echo "‚ö†Ô∏è –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ç–æ –ø–æ –≤–∞—à–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é."
          # fi

          # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∏–∂–µ:
          # ./scripts/generate-schemas.sh || true
          # ./scripts/sync-openapi.sh || true
          # ------------------ CUSTOM TASKS END ------------------

          echo "‚úÖ –ó–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã."

      - name: Detect changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–¥–∞—á."
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è."
            git status --short
          fi

      - name: Stop if no changes (full mode)
        if: steps.mode.outputs.mode == 'full' && steps.changes.outputs.changed == 'false'
        run: echo "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ: –Ω–µ—á–µ–≥–æ –∫–æ–º–º–∏—Ç–∏—Ç—å."

      - name: Commit changes (full mode)
        if: steps.mode.outputs.mode == 'full' && steps.changes.outputs.changed == 'true'
        run: |
          git add -A
          commit_msg="chore(autopilot): automated updates $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git commit -m "$commit_msg" || echo "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞."
          git log -1 --oneline

      - name: Push branch (full mode)
        if: steps.mode.outputs.mode == 'full' && steps.changes.outputs.changed == 'true'
        run: |
          git push -u origin "${{ steps.branch.outputs.work_branch }}"

      - name: Create or update PR (full mode)
        if: steps.mode.outputs.mode == 'full' && steps.changes.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_PAT }}
        run: |
          title="Autopilot: Automated updates ($(date -u +'%Y-%m-%d'))"
          body=$(cat <<'EOF'
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π Pull Request.

–°–æ–¥–µ—Ä–∂–∏—Ç:
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–¥ —Å–ª–∏—è–Ω–∏–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
EOF
)
          existing_number=$(gh pr list --head "${{ steps.branch.outputs.work_branch }}" --json number --jq '.[0].number' || true)
          if [ -n "$existing_number" ]; then
            echo "‚ÑπÔ∏è PR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: #$existing_number"
            gh pr edit "$existing_number" --title "$title" --body "$body"
          else
            gh pr create --head "${{ steps.branch.outputs.work_branch }}" --base "${MAIN_BRANCH}" --title "$title" --body "$body"
          fi

      - name: Enable auto-merge (full mode)
        if: steps.mode.outputs.mode == 'full' && steps.changes.outputs.changed == 'true' && inputs.enable_auto_merge == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_PAT }}
        run: |
          pr_number=$(gh pr list --head "${{ steps.branch.outputs.work_branch }}" --json number --jq '.[0].number')
          if [ -z "$pr_number" ]; then
            echo "‚ùå PR –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤—Ç–æ-merge."
            exit 0
          fi
          echo "–í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ-merge –¥–ª—è PR #$pr_number"
          gh pr merge "$pr_number" --auto --squash || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å auto-merge (–≤–æ–∑–º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)."

      - name: Direct mode commit (no PR)
        if: steps.mode.outputs.mode == 'direct' && steps.changes.outputs.changed == 'true'
        run: |
            git checkout "${MAIN_BRANCH}"
            git add -A
            commit_msg="chore(autopilot-direct): automated updates $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git commit -m "$commit_msg" || echo "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            git push origin "${MAIN_BRANCH}"

      - name: Summary
        run: |
          echo "================ SUMMARY ================"
          echo "Mode: ${{ steps.mode.outputs.mode }}"
          echo "Changes detected: ${{ steps.changes.outputs.changed }}"
          if [ "${{ steps.mode.outputs.mode }}" = "full" ]; then
            echo "Branch (if created): ${{ steps.branch.outputs.work_branch }}"
          fi
          echo "========================================="